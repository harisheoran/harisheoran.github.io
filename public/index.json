[{"content":"","date":"7 September 2023","permalink":"/","section":"","summary":"","title":""},{"content":"","date":"7 September 2023","permalink":"/projects/","section":"","summary":"","title":""},{"content":"","date":"7 September 2023","permalink":"/categories/ai/","section":"Categories","summary":"","title":"AI"},{"content":"","date":"7 September 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"7 September 2023","permalink":"/categories/gpt/","section":"Categories","summary":"","title":"GPT"},{"content":"Talk to your pdfs using GPT.\nTech Stack # Python Open AI Langchain Progress so far # ","date":"7 September 2023","permalink":"/projects/gptfordoc/","section":"","summary":"Talk to your pdfs using GPT.","title":"GPT for PDFs"},{"content":"","date":"7 September 2023","permalink":"/tags/langchain/","section":"Tags","summary":"","title":"Langchain"},{"content":"","date":"7 September 2023","permalink":"/tags/openai-api/","section":"Tags","summary":"","title":"Openai API"},{"content":"","date":"7 September 2023","permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":"7 September 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"22 August 2023","permalink":"/logs/","section":"","summary":"","title":""},{"content":" Basic Github Action Workflow # # name of the workflow name: ci # defining when should the wokflow should be triggered, in our case it should be when code is pushed on the main branch on: push: branches: - \u0026#34;main\u0026#34; # jobs - contain a list of jobs which will be executed # build - it is the name of our first job # runs-on - it is the name of OS which it will run on. jobs: build: runs-on: ubuntu-latest steps: # this step checkouts the repo code onto your runner environment which is \u0026#39;ubuntu-latest\u0026#39; - name: Checkout uses: actions/checkout@v3 # login into Docker Hub account - name: Login to Docker Hub uses: docker/login-action@v2 with: username: ${{ secrets.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }} # this step build the Docker Buildx, a tool for building a multi-platform Docker images. - name: Set up Docker Buildx uses: docker/setup-buildx-action@v2 # This step uses the docker/build-push-action@v4 action to build and push the Docker image. - name: Build and push uses: docker/build-push-action@v4 with: context: . # build context which is the root directory file: ./Dockerfile # path to Dockerfile push: true # push the built image tags: ${{ secrets.DOCKERHUB_USERNAME }}/sparrowbot:latest # Specifies the image tag using the Docker Hub username from GitHub Secrets and the tag \u0026#34;sparrowbot:latest\u0026#34;. build-args: | # Provides build arguments to the Docker build process, here it sets 2 token for the bot SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }} SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }} ","date":"22 August 2023","permalink":"/logs/cicd/","section":"","summary":"Basic Github Action Workflow # # name of the workflow name: ci # defining when should the wokflow should be triggered, in our case it should be when code is pushed on the main branch on: push: branches: - \u0026#34;main\u0026#34; # jobs - contain a list of jobs which will be executed # build - it is the name of our first job # runs-on - it is the name of OS which it will run on.","title":"CI/CD"},{"content":"","date":"22 August 2023","permalink":"/tags/github-action/","section":"Tags","summary":"","title":"Github Action"},{"content":"","date":"15 August 2023","permalink":"/categories/container/","section":"Categories","summary":"","title":"Container"},{"content":"","date":"15 August 2023","permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker"},{"content":" Resources # Docker Official Docs Building Dockerfile # docker init to initialize the dockerfile. -t / --tag to give name to a docker image. docker images to list all the docker images. Sample Dockerfile\n# Python Image as the base image ARG PYTHON_VERSION=3.11.3 FROM python:${PYTHON_VERSION}-slim as base # Prevents Python from writing pyc files. ENV PYTHONDONTWRITEBYTECODE=1 # Keeps Python from buffering stdout and stderr to avoid situations where # the application crashes without emitting any logs due to buffering. ENV PYTHONUNBUFFERED=1 # Set the working directory in the container WORKDIR /app # Set environment varaible for bot(Bot Token \u0026amp; Signing Secret) #ENV SLACK_BOT_TOKEN \u0026#34;\u0026#34; #ENV SLACK_SIGNING_SECRET \u0026#34;\u0026#34; # Create a non-privileged user that the app will run under. # See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user ARG UID=10001 RUN adduser \\ --disabled-password \\ --gecos \u0026#34;\u0026#34; \\ --home \u0026#34;/nonexistent\u0026#34; \\ --shell \u0026#34;/sbin/nologin\u0026#34; \\ --no-create-home \\ --uid \u0026#34;${UID}\u0026#34; \\ appuser # WHY ? -\u0026gt; This efficiently installs Python dependencies by taking advantage of Docker\u0026#39;s caching mechanisms. # Download dependencies as a separate step to take advantage of Docker\u0026#39;s caching. # Leverage a cache mount to /root/.cache/pip to speed up subsequent builds. # Leverage a bind mount to requirements.txt to avoid having to copy them into # into this layer. # Docker\u0026#39;s cache allows reusing previous build layers, speeding up subsequent builds. # By using cache mounts for pip\u0026#39;s cache directory and binding the requirements.txt file, # the installation process can be efficient without copying the entire source. RUN --mount=type=cache,target=/root/.cache/pip \\ --mount=type=bind,source=requirements.txt,target=requirements.txt \\ python -m pip install -r requirements.txt # Switch to the non-privileged user(which you create earlier) to run the application. # It\u0026#39;s a security best practice to run applications using the least privilege principle. # The user context is switched to appuser, reducing the potential impact of security vulnerabilities. USER appuser # first copy the the environment file #COPY .env . # Copy the source code into the container into the working directory of container that we create earlier. COPY . . # Expose the port that the application listens on. EXPOSE 3000 # Run the application. In bash shell, first execute source .env to load all env variables and then run the application CMD [\u0026#34;/bin/bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;python app.py\u0026#34;] Dockerfile refrence\nBuilding Docker Image # docker build --tag myImage .\n. is to tell that Dockerfile is in root directory. Tag images\nRun the Docker Container # Docker container run -d -p 3000:3000 myImage\n-d/ --detach detach mode, so that it can run in the background. -p define the port. List all the containers docker ps -a / --all docker container ls\nStop/Restart the container docker stop/restart myImage\nRun with ENV variable -e flag.\n","date":"15 August 2023","permalink":"/logs/docker/","section":"","summary":"Resources # Docker Official Docs Building Dockerfile # docker init to initialize the dockerfile.","title":"Docker"},{"content":"","date":"15 August 2023","permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":" Linux Blogs # Linux Journey Linux File system # / /home # home directories and files from users /bin # user command binaries (cat, echo, etc.) /sbin # system binaries (need sudo) /usr # user /usr/bin # primary executables that system needs in order to run /usr/local # programs installed just for that user /lib # when executables in /bin need additional library files in order to run /var # variable data (temporary) /var/log # logs are stored here usually for 30 days /var/log/syslog # system logs /var/cache # cached data from programs /opt # programs that install everything in one directory (not separated in /bin and /lib) /etc # system wide configurations /etc/fstab # controls how different filesystems are treated each time they are introduced to a system /etc/hosts # used to translate hostnames to IP-addresses. /etc/hostname # name of the machine /etc/sudoers # who can act as the super user (sudo) /tmp # temporary location for running processes /boot # do not touch - for booting the system /dev # devices configurations like mouse and keyboard /media # devices like CD or usb drive auto mounts here /mnt # temporary mount points for additional filesystems More about Linux Filesystem\nLinux neccessary commands # cd / pwd ls # find the release info lsb_release -a cat /etc/os-release uname -a lscpu lsmem # find syslog find / -name \u0026#39;syslog\u0026#39; find / -iname \u0026#39;syslog\u0026#39; # change directory to where syslog is cd /var/log/ # view the syslog cat /var/log/syslog cat /var/log/syslog | less # view default options for new users # bash is command language interpreter man useradd useradd -D # change from Bourne shell to Bourne Again SHell useradd -D -s /bin/bash # what shell am I running echo $0 echo $SHELL # all available shells cat /etc/shells # adduser chris # will prompt for password and other info useradd -m chris # create user and add a home directory # useradd -m chad # useradd -m newuser # create password passwd chris # Add User to Sudo Group usermod -aG sudo chris # switch to user su - chris # add group groupadd docker # get group info getent group docker # add your user to the docker group sudo usermod -aG docker $USER # what groups user is in groups chris cat /etc/group Services \u0026amp; Git # systemd # Service which control all other services\nps -aux | grep systemd More on Processes/Services in Linux\n","date":"15 August 2023","permalink":"/logs/linux/","section":"","summary":"Linux Blogs # Linux Journey Linux File system # / /home # home directories and files from users /bin # user command binaries (cat, echo, etc.","title":"Linux"},{"content":"","date":"15 August 2023","permalink":"/categories/os/","section":"Categories","summary":"","title":"OS"},{"content":"","date":"13 August 2023","permalink":"/categories/bot/","section":"Categories","summary":"","title":"Bot"},{"content":"","date":"13 August 2023","permalink":"/tags/gpt/","section":"Tags","summary":"","title":"GPT"},{"content":"","date":"13 August 2023","permalink":"/tags/slack-bot/","section":"Tags","summary":"","title":"Slack bot"},{"content":" Our project utilizes AI to enhance Slack, streamlining tasks and sparking creativity for seamless teamwork.\nWe (I and my friend Manish) are building this project in BuildSpace.\nWeek 2 # Week 3 # ","date":"13 August 2023","permalink":"/projects/sparrowbot/","section":"","summary":"Our project utilizes AI to enhance Slack, streamlining tasks and sparking creativity for seamless teamwork.","title":"Sparrow Bot"},{"content":"","date":"5 August 2023","permalink":"/categories/backend/","section":"Categories","summary":"","title":"Backend"},{"content":"","date":"5 August 2023","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"Kotlin"},{"content":"","date":"5 August 2023","permalink":"/tags/spring-boot/","section":"Tags","summary":"","title":"Spring Boot"},{"content":" Day 1 # Application Class # Main entry point of Spring Boot\nLayers # Web Layer / Controller Layer + REST Endpoints mappings Service Layer Data Source Data layer Web Layer # This layer has the Controllers(These are just classes which have REST endpoint methods)\n@RestController annotation for creating controller class.\n@RequestMapping annotation for defining the endpoint path\n@GetMapping annotation for GET request.\n@RestController @RequestMapping(\u0026#34;/banks\u0026#34;) class BankController(){ @GetMapping fun getBanks(): List\u0026lt;Bank\u0026gt;{ ... } } @PathVariable for taking an argument when sending the request.\nService Layer # This layer has all the businnes logic\nData Source # This layer has storage(database) and retrieve data\n@Repository Responsible for interaction between app and underlying data Data Layer # This layer has models, serialization logic, Entity classes\nProject Structure # gradle properties files described which needed to download setting.gradle contains all the plugins build.gradle contains all the dependencies needed src main contains the Application class, which is the entry point. test contains all the test files resources static template application.properties contains configuration of whole application like which port to use etc. Test Driven Development using Junit 5 # Dependency Injection # ","date":"5 August 2023","permalink":"/logs/springboot/","section":"","summary":"Day 1 # Application Class # Main entry point of Spring Boot","title":"Spring Boot with Kotlin"},{"content":"","date":"3 August 2023","permalink":"/categories/android/","section":"Categories","summary":"","title":"Android"},{"content":"","date":"3 August 2023","permalink":"/tags/database/","section":"Tags","summary":"","title":"Database"},{"content":"","date":"3 August 2023","permalink":"/tags/navigation/","section":"Tags","summary":"","title":"Navigation"},{"content":" 3 main componenets of Navigation # NavHost NavGraph NavController NavHost is the container which is responsible to display destinations(each destinations have a unique specific route) screens\nNavGraph is the place where all the destiantions and how to naviagte to them are described OR it is map, collection of composables( like nodes )\nNavController will control the navigation and take you to your desired destinations.\nImage loading\u0026hellip; NavHost( navController = navController, startDestination = Home.route, modifier = modifier.padding(it) ) { composable(route = Home.route) { HomeScreen() { arg -\u0026gt; navController.navigate(\u0026#34;${Details.route}/$arg\u0026#34;) { launchSingleTop = true } } } composable( route = Details.argWithRoute, arguments = Details.argument ) { DetailsMainScreen() } } NavHost requires navController to control the navigation in itself and a starting point. NavHost also requires NavGraph builder parameter to build navgraph, in above code its in the trailing lambda. Each composable is like a node in NavGraph, which requires a route(like a unique location) and in that composable we define which compose function should execute here. ","date":"3 August 2023","permalink":"/logs/navigation/","section":"","summary":"3 main componenets of Navigation # NavHost NavGraph NavController NavHost is the container which is responsible to display destinations(each destinations have a unique specific route) screens","title":"Navigation in Android"},{"content":" 3 main components to Room DB # ","date":"3 August 2023","permalink":"/logs/roomdb/","section":"","summary":" 3 main components to Room DB # ","title":"Room DB"},{"content":"","date":"3 August 2023","permalink":"/tags/sqlite/","section":"Tags","summary":"","title":"SQLite"},{"content":"We are going to learn about Hilt by using of Hilt as dependency Injection in a basic MVVM app.\nIf you are new to Dependency concept, first check out About Dependency Injection below.\nUsing Hilt in App # We are going to learn about Hilt by using Hilt as a dependency Injection in a basic MVVM app.\nClone the starter app from the \u0026ldquo;starter_app\u0026rdquo; branch harisheoran/basic-hilt-demo null 1 0 Understand file structure (MVVM structure) MainAcivity contains UI Logic MyViewModel contains the app\u0026rsquo;s state logic MyRepository have methods to fetch data from MyServie MyServie provides image URLs. Create a Hilt Application class \u0026amp; annotate it with @HiltAndroidApp @HiltAndroidAppclass MyApplication: Application(){ override fun onCreate(){ super.onCreate() } } All apps that use Hilt must contain an Application class that is annotated with @HiltAndroidApp.\n@HiltAndroidApp triggers Hilt\u0026rsquo;s code generation, including a base class for your application that serves as the application-level dependency container.\nThis generated Hilt component is attached to the Application object\u0026rsquo;s lifecycle and provides dependencies to it. Additionally, it is the parent component of the app, which means that other components can access the dependencies that it provides.\nInject dependencies into Android classes Once Hilt is set up in your Application class and an application-level component is available, Hilt can provide dependencies to other Android classes that have the @AndroidEntryPoint annotation: MainActivity\n@AndroidEntryPointclass MainActivity : AppCompatActivity() { } and in our Manifest file, in the application tag\nandroid:name=\u0026#34;.MyApplication\u0026#34; Now, start from MyRepository First Identify the class dependency - which is the service instance. class MyRepository { private val service = MyService() fun getRandomImageUrl(): String { return service.getImageUrl() } } To perform field injection, hilt had to know about how to provide instance of dependency from the corresponding component.\nA binding contains the information necessary to provide instances of a type as a dependency. To provide binding to the Hilt is by constructor injection using @Inject annotation, and the parameters of that constructor are the dependencies of that class.\nclass MyRepository @Inject constructor(private val service: MyService) { fun getRandomImageUrl(): String { return service.getImageUrl() }} ViewModel In ViewModel, we have a dependency on the MyRepository instance. Simply we can\u0026rsquo;t pass the MyRepository instance in the constructor of ViewModel simply, that\u0026rsquo;s a whole different scenario, but Hilt have an annotation to make it work and it is one of the best features of Hilt @HiltViewModelclass MyViewModel @Inject constructor(private val repository: MyRepository) : ViewModel() { } MainActivity We have an instance of Picasso as a dependency, and it is created every time when a new photo is shown. Sometimes a type can\u0026rsquo;t be constructed, as you cannot constructor-inject a type that you do not own like 3rd party library.\nNow you have to provide info to Hilt about how to construct the needed object instance,\nHilt Modules A Hilt module is a class that is annotated with @Module. Like a Dagger module, it informs Hilt how to provide instances of certain types. Unlike Dagger modules, you must annotate Hilt modules with @InstallIn to tell Hilt which Android class each module will be used or installed in.\nCreate a singleton class Picasso Module @Module@InstallIn(SingletonComponent::class) object PicassoModule { @Provides fun providePicasso(): Picasso { return Picasso.get() } } you can tell Hilt how to provide instances of this type by creating a function inside a Hilt module and annotating that function with @Provides. The annotated function supplies the following information to Hilt:\nThe function return type tells Hilt what type the function provides instances of. - The function parameters tell Hilt the dependencies of the corresponding type. The function body tells Hilt how to provide an instance of the corresponding type. Hilt executes the function body every time it needs to provide an instance of that type. Create a Util class to load images from Picasso class PicassoUtil @Inject constructor(private val picasso: Picasso) { fun loadImage(imgUrl: String, imgView: ImageView){ picasso.load(imgUrl).into(imgView) } } it automatically takes Picasso from Picasso Module and now Update our MainActivity\n@AndroidEntryPointclass MainActivity : AppCompatActivity() { ... @Inject lateinit var picassoUtil: PicassoUtil ... override fun onCreate(savedInstanceState: Bundle?) { ... ViewModel.image.observe(this) { picassoUtil.loadImage(it, binding.imageView) } } } That\u0026rsquo;s it, here is the code harisheoran/basic-hilt-demo null 1 0 Learn about Dependency Injection\nAbout Dependency Injection # What is a Dependency? # Lets say there is a class Car\nclass Car(){ val engine = Engine() fun start(){ engine.run() } } Class Car needs reference to Engine instance, it depends on Engine object, so engine object is the dependency of Car class.\nSo, there can be many dependency Car class can have like Nitro, Tire, Gas Engine, Electric Engine as its dependency.\nWhat are the ways to provide the needed object to a class? # Initialize own instance of the Engine - As described above. class Car(){ val engine = Engine() fun start(){ engine.run() } } fun main(args: Array) { val car = Car() car.start() } From an API.\nConstructor Injection As a parameter in the class cunstructor\nInstead of each instance of car creating its own Engine object on initialization, it recevies Engine object as an parameter in its constructor.\nclass Car(val engine: Engine){ fun start(){ engine.run() } } fun main(args: Array){ val engine = Engine() val car = Car(engine) car.start() } Benefits\nCode reusability As you can pass different types of engine instance like Gas Engine or Electric Engine without any change in Car class\nCode testability You can test your Car class with many scenearios by passing Test Engine by configuring it with different tests.\nThis is manual Dependency Injection Manual dependency can be overwhelming as Car can have many dependencies which will make it more tedious.\nField Injection Certain Android framework classes such as activities and fragments are instantiated by the system, so constructor injection is not possible. With field injection, dependencies are instantiated after the class is created. class Car(){ lateinit var engine: Engine fun start(){ engine.run() } } fun main(args: Array){ val car = Car() car.engine = Engine() car.start() } Automated Dependency Injection # Hilt is Jetpack\u0026rsquo;s recommended library for dependency injection in Android. Hilt defines a standard way to do DI in your application by providing containers for every Android class in your project and managing their lifecycles automatically for you.\nHilt is built on top of the popular DI library Dagger to benefit from the compile time correctness, runtime performance, scalability, and Android Studio support that Dagger provides.\n","date":"17 July 2023","permalink":"/projects/basichiltdemo/","section":"","summary":"We are going to learn about Hilt by using of Hilt as dependency Injection in a basic MVVM app.","title":"Basic Hilt Demo App"},{"content":"","date":"17 July 2023","permalink":"/tags/dependency-injection/","section":"Tags","summary":"","title":"Dependency Injection"},{"content":"","date":"17 July 2023","permalink":"/tags/hilt/","section":"Tags","summary":"","title":"Hilt"},{"content":" Mail me 📧 harisheoran01@gmail.com\nLets Connect Twitter\nLinkedIn\nGithub\nContact I am currently open for full-time engineering roles, which involves Android app developmenet. Interested in working together? Feel free to schedule a meet! ","date":"12 July 2023","permalink":"/contact/","section":"","summary":"Mail me 📧 harisheoran01@gmail.","title":""},{"content":" A passionate full stack developer from India. 🔭 I’m currently working on Warriors Of Hind App and Sparrow bot.\n🌱 I’m currently learning Android, CI/CD pipeline, Docker, \u0026amp; Cloud.\n👯 I’m looking to collaborate on Android \u0026amp; backend projects.\n👨‍💻 All of my projects are available on my website.\n📫 How to reach me harisheoran01@gmail.com\n📄 Know about my experiences - resume\nRecent Blogs posts # Basic Hilt Demo App Building App for my University Deploy your website on Cloudflare. Be Anonymous using Tor. Privacy for everyone. Connect with me: 🛠 Language and tools # 📊GitHub Stats : # Wakatime Stats : # Support: ","date":"29 June 2023","permalink":"/about/","section":"","summary":"A passionate full stack developer from India.","title":"About"},{"content":"","date":"29 June 2023","permalink":"/tags/mvvm/","section":"Tags","summary":"","title":"MVVM"},{"content":" App to browse characters, episodes and search details from Rick \u0026amp; Morty Tv show. Download app View source code on Github # harisheoran/rick-morty-collection Explore the characters of the Rick and Morty Tv show. Kotlin 1 0 Gallery # Demo # Read about its MVVM architecture here. # Tech Stack \u0026amp; Libraries # Kotlin Language MVVM Architecture Retrofit Picasso Epoxy RecyclerView Paging 3 Moshi API # The Rick and Morty API MVVM Architecture # Image caption Start from Network Layer\n1. Network Layer # 4 main components are\nService Interface It define how the app should talk to server interface RickAndMortyService { @GET(value = \u0026#34;character/\u0026#34;) suspend fun getCharactersPage(@Query(value = \u0026#34;page\u0026#34;) pageIndex: Int): Response\u0026lt;GetCharactersPageResponse\u0026gt; } Retrofit service Creates an implementation of the API endpoint defined by our interface and pass that service to our API client. object NetworkLayer { val moshi = Moshi.Builder() .add(KotlinJsonAdapterFactory()) .build() private val retrofit: Retrofit = Retrofit.Builder() .client(getLoggingHttpClient()) .baseUrl(\u0026#34;https://rickandmortyapi.com/api/\u0026#34;) .addConverterFactory(MoshiConverterFactory.create(moshi)) .build() private val rickAndMortyService: RickAndMortyService by lazy { retrofit.create(RickAndMortyService::class.java) } val apiClient = ApiClient(rickAndMortyService) } API Client\nThrough which our app will talk to server. It has the methods to talk to API and return the response inside our Network Error handling Network Error handling Class SimpleResponse\nA simple kind of wrapper class\nIt have 3 constructor as a parameter - Status, reponse from API client and exception\nIt has some properties to check weather the response is successfull or failed\n2. Repository Layer # We have 3 repository for fetching Character list( for home screen), Single Charater and Episodes.\nclass CharacterListRepository { suspend fun getCharactersPage(pageIndex: Int): GetCharactersPageResponse? { val request = NetworkLayer.apiClient.getCharactersPages(pageIndex) if (request.failed || !request.isSucceed) { return null } return request.body } } Sending request to api using Api client val request = NetworkLayer.apiClient.getCharactersPages(pageIndex) then checking the request and return accordingly.\nPaging 3 # \u0026hellip;\nViewModel # \u0026hellip;\nUI # \u0026hellip;\nEpoxy UI # \u0026hellip;\nData binding # \u0026hellip;\n","date":"29 June 2023","permalink":"/projects/rickmorty/","section":"","summary":"App to browse characters, episodes and search details from Rick \u0026amp; Morty Tv show.","title":"Rick \u0026 Morty Collection App"},{"content":"","date":"15 April 2023","permalink":"/tags/cloud-firestore/","section":"Tags","summary":"","title":"Cloud Firestore"},{"content":" App to get access of study materials for college students. # Tech Stacks # Kotlin Language Android Jetpack Components Firebase Cloud Firestore Lottie Android View on Website # Download pre-alpha version # View on Github # harisheoran/collegehub App to get access of study materials for college students. null 0 0 ","date":"15 April 2023","permalink":"/projects/collegehub/","section":"","summary":"App to get access of study materials for college students.","title":"College Hub App"},{"content":"","date":"15 April 2023","permalink":"/tags/firebase/","section":"Tags","summary":"","title":"Firebase"},{"content":"","date":"30 December 2022","permalink":"/tags/imgflip-api/","section":"Tags","summary":"","title":"ImgFlip API"},{"content":"","date":"30 December 2022","permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":" App to browse memes. # For bowsing meme templates from ImgFlip API.\nView on Github # Tech Stack\nKotlin Jetpack Navigation Components Retrofit for networking Coil to display images Demo # ","date":"30 December 2022","permalink":"/projects/memeit/","section":"","summary":"App to browse memes.","title":"Memeit App"},{"content":"","date":"30 December 2022","permalink":"/tags/reddit-api/","section":"Tags","summary":"","title":"Reddit API"},{"content":"","date":"29 October 2022","permalink":"/tags/bootstrap/","section":"Tags","summary":"","title":"Bootstrap"},{"content":"","date":"29 October 2022","permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare"},{"content":"","date":"29 October 2022","permalink":"/tags/express-js/","section":"Tags","summary":"","title":"Express JS"},{"content":"","date":"29 October 2022","permalink":"/tags/mongodb/","section":"Tags","summary":"","title":"MongoDB"},{"content":"","date":"29 October 2022","permalink":"/tags/nodejs/","section":"Tags","summary":"","title":"NodeJs"},{"content":"","date":"29 October 2022","permalink":"/categories/web/","section":"Categories","summary":"","title":"Web"},{"content":" Programmer Server # A place for programmers to discuss, share thier ideas and make connections.\nView on Github\nMemes of the day # Browse top memes of the day\nView on Website\nWeb Mini Projects # Weather Application Random Color Generator Pokemon Generator Weight Convertor View on Website\n","date":"29 October 2022","permalink":"/projects/webprojects/","section":"","summary":"Programmer Server # A place for programmers to discuss, share thier ideas and make connections.","title":"Web Projects"},{"content":"Warriors Of Hind App\nTech Stack # Frontend\nMVVM Architecture Kotlin Jetpack Compose Retrofit Hilt Coil Backend\nJsonBin View source code on Github # harisheoran/Adi Kotlin 0 0 ","date":"1 January 0001","permalink":"/projects/adi_app/","section":"","summary":"Warriors Of Hind App","title":"Adi App"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/ci/cd/","section":"Categories","summary":"","title":"CI/CD"},{"content":"","date":"1 January 0001","permalink":"/tags/jetpack-compose/","section":"Tags","summary":"","title":"Jetpack Compose"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]