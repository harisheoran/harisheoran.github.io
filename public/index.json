[{"content":"","date":"20 November 2023","permalink":"/","section":"","summary":"","title":""},{"content":"","date":"20 November 2023","permalink":"/projects/","section":"","summary":"","title":""},{"content":"","date":"20 November 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"Containerization of a simple Node JS application using Docker and Docker Compose.\nIn this project, I have worked on\nContainerization using Docker Dockerfile Building Docker Images Running container from the image. Volumes and Bind Mount Anonymous Volumes \u0026amp; Read Only volumes Envrionment variables of app Docker Compose Development \u0026amp; Production Dockerfiles Use of Bash Script Github Action to push the image on Docker Hub Registry Read the full detailed article on my blog. # Project Workflow # Docker Image on Docker Hub # harisheoran/my-node-app\nGithub Repository # harisheoran/nodejs-docker Full fledged DevOps Project JavaScript 0 0 ","date":"20 November 2023","permalink":"/projects/nodejs_docker/","section":"","summary":"Containerization of a simple Node JS application using Docker and Docker Compose.","title":"Containerization of NodeJS app"},{"content":"","date":"20 November 2023","permalink":"/categories/devops/","section":"Categories","summary":"","title":"DevOps"},{"content":"","date":"20 November 2023","permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker"},{"content":"","date":"20 November 2023","permalink":"/tags/docker-compose/","section":"Tags","summary":"","title":"Docker-Compose"},{"content":"","date":"20 November 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" I\u0026rsquo;m Harish, a DevOps Engineer with a deep-rooted commitment to enhancing software development and deployment practices. My daily toolkit comprises AWS, Docker, Ansible, Terraform, and Jenkins, allowing me to orchestrate and automate the software delivery pipeline efficiently. Linux serves as the foundation of my daily operations in the DevOps realm, offering robust stability and flexibility. Additionally, I\u0026rsquo;m well-versed in vital tools like Git, GitHub, Vim, and shell scripting.\nBefore embracing the DevOps path, I excelled as a Native Android Developer. My skill set encompassed Kotlin, Jetpack libraries, Jetpack Compose, XML, Retrofit, and Dependency Injection with Hilt. My tech journey initiated with web development, providing me with a holistic perspective on software engineering.\nI approach each project with a continuous learning mindset and a genuine passion for tackling intricate technical challenges. Let\u0026rsquo;s collaborate to drive your technology initiatives forward, leveraging the right tools for the job.\nDeveloper Profile # Github üõ† Technology and tools # \u003c!DOCTYPE html\u003e HTML 5 Boilerplate Journey # AWS Community Day Rajasthan 4th November 2023 API Day Jaipur by Postman September 2023 Previous Nextsads Smart India Hackathon: Inter College October 2023 During my academic journey, I actively engaged in the Smart India Hackathon, where I led Team Sparrow Bit to secure an impressive 4th position in our university‚Äôs internal hackathon competition. Our endeavor revolved around addressing a pressing issue through innovation and technology. The challenge we tackled was the complexity of legal documentation, which often poses a formidable obstacle for individuals and small businesses in India. With determination and technical prowess, we crafted a groundbreaking AI-powered solution that streamlined the legal documentation process. By harnessing Large Language Models (LLMs) and advanced Natural Language Processing (NLP) techniques, our solution simplified convoluted legal language, enabled customizable document generation, and provided multilingual accessibility. BuildSpace August - September 2023 Build a A.I. powered Slack Bot ","date":"11 November 2023","permalink":"/about/","section":"","summary":"I\u0026rsquo;m Harish, a DevOps Engineer with a deep-rooted commitment to enhancing software development and deployment practices.","title":"About"},{"content":"","date":"5 November 2023","permalink":"/tags/aws/","section":"Tags","summary":"","title":"AWS"},{"content":"","date":"5 November 2023","permalink":"/tags/s3/","section":"Tags","summary":"","title":"S3"},{"content":"Deploy a static website on AWS S3 using Terraform.\nGithub Repository # harisheoran/memesofthday-terraform HTML 0 1 Demo # Main Terraform file # # create a S3 bucket resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;mybucket\u0026#34; { bucket = var.bucketName } # bucket ownership resource \u0026#34;aws_s3_bucket_ownership_controls\u0026#34; \u0026#34;myownershipcontrols\u0026#34; { bucket = aws_s3_bucket.mybucket.id rule { object_ownership = \u0026#34;BucketOwnerPreferred\u0026#34; } } # make S3 access public so that anyone can access it resource \u0026#34;aws_s3_bucket_public_access_block\u0026#34; \u0026#34;mypublicaccess\u0026#34; { bucket = aws_s3_bucket.mybucket.id block_public_acls = false block_public_policy = false ignore_public_acls = false restrict_public_buckets = false } # access control list resource \u0026#34;aws_s3_bucket_acl\u0026#34; \u0026#34;myacl\u0026#34; { depends_on = [ aws_s3_bucket_ownership_controls.myownershipcontrols, aws_s3_bucket_public_access_block.mypublicaccess, ] bucket = aws_s3_bucket.mybucket.id acl = \u0026#34;public-read\u0026#34; } # index.html resource \u0026#34;aws_s3_object\u0026#34; \u0026#34;index\u0026#34; { bucket = aws_s3_bucket.mybucket.id key = \u0026#34;index.html\u0026#34; source = \u0026#34;index.html\u0026#34; acl = \u0026#34;public-read\u0026#34; content_type = \u0026#34;text/html\u0026#34; } # error.html resource \u0026#34;aws_s3_object\u0026#34; \u0026#34;error\u0026#34; { bucket = aws_s3_bucket.mybucket.id key = \u0026#34;error.html\u0026#34; source = \u0026#34;error.html\u0026#34; acl = \u0026#34;public-read\u0026#34; content_type = \u0026#34;text/html\u0026#34; } # main.js resource \u0026#34;aws_s3_object\u0026#34; \u0026#34;mainjs\u0026#34; { bucket = aws_s3_bucket.mybucket.id key = \u0026#34;main.js\u0026#34; source = \u0026#34;main.js\u0026#34; acl = \u0026#34;public-read\u0026#34; content_type = \u0026#34;javascript\u0026#34; } # configure the html files for website resource \u0026#34;aws_s3_bucket_website_configuration\u0026#34; \u0026#34;memesoftheday\u0026#34; { bucket = aws_s3_bucket.mybucket.id index_document { suffix = \u0026#34;index.html\u0026#34; } error_document { key = \u0026#34;error.html\u0026#34; } depends_on = [ aws_s3_bucket_acl.myacl ] } Save Terrafrom state on a remote backend S3 with state lock mechanism using Dynamo DB # backend \u0026#34;s3\u0026#34; { bucket = \u0026#34;statebucket-website\u0026#34; key = \u0026#34;terraform.tfstate\u0026#34; region = \u0026#34;eu-north-1\u0026#34; encrypt = true dynamodb_table = \u0026#34;state-lock\u0026#34; } ","date":"5 November 2023","permalink":"/projects/terraform_s3/","section":"","summary":"Deploy a static website on AWS S3 using Terraform.","title":"Static Website hosted on AWS S3 using Terraform"},{"content":"","date":"5 November 2023","permalink":"/tags/terraform/","section":"Tags","summary":"","title":"Terraform"},{"content":"","date":"28 September 2023","permalink":"/categories/android/","section":"Categories","summary":"","title":"Android"},{"content":"","date":"28 September 2023","permalink":"/tags/arduino/","section":"Tags","summary":"","title":"Arduino"},{"content":"üó≥Ô∏è Electra Touch: Polypurpose Polling System\nWe are thrilled to share a glimpse of our current project ‚Äì a versatile polling system designed for a variety of applications, featuring cutting-edge technology integration. Here\u0026rsquo;s a concise overview:\nProgress so far: # Components: # Arduino ESP8266 Fingerprint Sensor (R307) Purpose: # Our primary objective is to create a comprehensive prototype for election scenarios.\nKey Features: # 1Ô∏è‚É£ User Registration: # Users are required to register themselves. Their registration data is securely uploaded to Firebase Database. 2Ô∏è‚É£ Android App: # An Android app has been developed. Only individuals with admin access can access and utilize the app. 3Ô∏è‚É£ Election Process: # During the election, users must verify their registration status. If registered, they can cast their votes for their preferred party. 4Ô∏è‚É£ Vote Tracking: # Vote counts are meticulously recorded in Firebase Database. 5Ô∏è‚É£ Election Results: # The final election results are dynamically displayed on the Android app. Source Code # Android App # harisheoran/Electra-Touch Kotlin 0 0 IOT # richa-m/Electra-Touch C\u0026#43;\u0026#43; 0 0 Team Members # Maaz Khan Ridhi Bansal Richa Mathur me ","date":"28 September 2023","permalink":"/projects/electratouch/","section":"","summary":"üó≥Ô∏è Electra Touch: Polypurpose Polling System","title":"Electra Touch"},{"content":"","date":"28 September 2023","permalink":"/tags/esp8266/","section":"Tags","summary":"","title":"ESP8266"},{"content":"","date":"28 September 2023","permalink":"/categories/iot/","section":"Categories","summary":"","title":"IOT"},{"content":"","date":"28 September 2023","permalink":"/tags/jetpack-compose/","section":"Tags","summary":"","title":"Jetpack Compose"},{"content":"","date":"28 September 2023","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"Kotlin"},{"content":"","date":"28 September 2023","permalink":"/tags/mvvm/","section":"Tags","summary":"","title":"MVVM"},{"content":"","date":"2 September 2023","permalink":"/categories/ai/","section":"Categories","summary":"","title":"AI"},{"content":"","date":"2 September 2023","permalink":"/categories/gpt/","section":"Categories","summary":"","title":"GPT"},{"content":"Talk to your pdfs using GPT.\nTech Stack # Python Open AI Langchain Demo # ","date":"2 September 2023","permalink":"/projects/gptfordoc/","section":"","summary":"Talk to your pdfs using GPT.","title":"GPT for PDFs"},{"content":"","date":"2 September 2023","permalink":"/tags/langchain/","section":"Tags","summary":"","title":"Langchain"},{"content":"","date":"2 September 2023","permalink":"/tags/openai-api/","section":"Tags","summary":"","title":"Openai API"},{"content":"","date":"2 September 2023","permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":"22 August 2023","permalink":"/logs/","section":"","summary":"","title":""},{"content":" Basic Github Action Workflow # # name of the workflow name: ci # defining when should the wokflow should be triggered, in our case it should be when code is pushed on the main branch on: push: branches: - \u0026#34;main\u0026#34; # jobs - contain a list of jobs which will be executed # build - it is the name of our first job # runs-on - it is the name of OS which it will run on. jobs: build: runs-on: ubuntu-latest steps: # this step checkouts the repo code onto your runner environment which is \u0026#39;ubuntu-latest\u0026#39; - name: Checkout uses: actions/checkout@v3 # login into Docker Hub account - name: Login to Docker Hub uses: docker/login-action@v2 with: username: ${{ secrets.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }} # this step build the Docker Buildx, a tool for building a multi-platform Docker images. - name: Set up Docker Buildx uses: docker/setup-buildx-action@v2 # This step uses the docker/build-push-action@v4 action to build and push the Docker image. - name: Build and push uses: docker/build-push-action@v4 with: context: . # build context which is the root directory file: ./Dockerfile # path to Dockerfile push: true # push the built image tags: ${{ secrets.DOCKERHUB_USERNAME }}/sparrowbot:latest # Specifies the image tag using the Docker Hub username from GitHub Secrets and the tag \u0026#34;sparrowbot:latest\u0026#34;. build-args: | # Provides build arguments to the Docker build process, here it sets 2 token for the bot SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }} SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }} ","date":"22 August 2023","permalink":"/logs/cicd/","section":"","summary":"Basic Github Action Workflow # # name of the workflow name: ci # defining when should the wokflow should be triggered, in our case it should be when code is pushed on the main branch on: push: branches: - \u0026#34;main\u0026#34; # jobs - contain a list of jobs which will be executed # build - it is the name of our first job # runs-on - it is the name of OS which it will run on.","title":"CI/CD"},{"content":" Resources # Docker Official Docs Building Dockerfile # docker init to initialize the dockerfile. -t / --tag to give name to a docker image. docker images to list all the docker images. Sample Dockerfile\n# Python Image as the base image ARG PYTHON_VERSION=3.11.3 FROM python:${PYTHON_VERSION}-slim as base # Prevents Python from writing pyc files. ENV PYTHONDONTWRITEBYTECODE=1 # Keeps Python from buffering stdout and stderr to avoid situations where # the application crashes without emitting any logs due to buffering. ENV PYTHONUNBUFFERED=1 # Set the working directory in the container WORKDIR /app # Set environment varaible for bot(Bot Token \u0026amp; Signing Secret) #ENV SLACK_BOT_TOKEN \u0026#34;\u0026#34; #ENV SLACK_SIGNING_SECRET \u0026#34;\u0026#34; # Create a non-privileged user that the app will run under. # See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user ARG UID=10001 RUN adduser \\ --disabled-password \\ --gecos \u0026#34;\u0026#34; \\ --home \u0026#34;/nonexistent\u0026#34; \\ --shell \u0026#34;/sbin/nologin\u0026#34; \\ --no-create-home \\ --uid \u0026#34;${UID}\u0026#34; \\ appuser # WHY ? -\u0026gt; This efficiently installs Python dependencies by taking advantage of Docker\u0026#39;s caching mechanisms. # Download dependencies as a separate step to take advantage of Docker\u0026#39;s caching. # Leverage a cache mount to /root/.cache/pip to speed up subsequent builds. # Leverage a bind mount to requirements.txt to avoid having to copy them into # into this layer. # Docker\u0026#39;s cache allows reusing previous build layers, speeding up subsequent builds. # By using cache mounts for pip\u0026#39;s cache directory and binding the requirements.txt file, # the installation process can be efficient without copying the entire source. RUN --mount=type=cache,target=/root/.cache/pip \\ --mount=type=bind,source=requirements.txt,target=requirements.txt \\ python -m pip install -r requirements.txt # Switch to the non-privileged user(which you create earlier) to run the application. # It\u0026#39;s a security best practice to run applications using the least privilege principle. # The user context is switched to appuser, reducing the potential impact of security vulnerabilities. USER appuser # first copy the the environment file #COPY .env . # Copy the source code into the container into the working directory of container that we create earlier. COPY . . # Expose the port that the application listens on. EXPOSE 3000 # Run the application. In bash shell, first execute source .env to load all env variables and then run the application CMD [\u0026#34;/bin/bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;python app.py\u0026#34;] Dockerfile refrence\nBuilding Docker Image # docker build --tag myImage .\n. is to tell that Dockerfile is in root directory. Tag images\nRun the Docker Container # Docker container run -d -p 3000:3000 myImage\n-d/ --detach detach mode, so that it can run in the background. -p define the port. List all the containers docker ps -a / --all docker container ls\nStop/Restart the container docker stop/restart myImage\nRun with ENV variable -e flag.\n","date":"15 August 2023","permalink":"/logs/docker/","section":"","summary":"Resources # Docker Official Docs Building Dockerfile # docker init to initialize the dockerfile.","title":"Docker"},{"content":" Linux Blogs # Linux Journey Linux File system # / /home # home directories and files from users /bin # user command binaries (cat, echo, etc.) /sbin # system binaries (need sudo) /usr # user /usr/bin # primary executables that system needs in order to run /usr/local # programs installed just for that user /lib # when executables in /bin need additional library files in order to run /var # variable data (temporary) /var/log # logs are stored here usually for 30 days /var/log/syslog # system logs /var/cache # cached data from programs /opt # programs that install everything in one directory (not separated in /bin and /lib) /etc # system wide configurations /etc/fstab # controls how different filesystems are treated each time they are introduced to a system /etc/hosts # used to translate hostnames to IP-addresses. /etc/hostname # name of the machine /etc/sudoers # who can act as the super user (sudo) /tmp # temporary location for running processes /boot # do not touch - for booting the system /dev # devices configurations like mouse and keyboard /media # devices like CD or usb drive auto mounts here /mnt # temporary mount points for additional filesystems More about Linux Filesystem\nLinux neccessary commands # cd / pwd ls # find the release info lsb_release -a cat /etc/os-release uname -a lscpu lsmem # find syslog find / -name \u0026#39;syslog\u0026#39; find / -iname \u0026#39;syslog\u0026#39; # change directory to where syslog is cd /var/log/ # view the syslog cat /var/log/syslog cat /var/log/syslog | less # view default options for new users # bash is command language interpreter man useradd useradd -D # change from Bourne shell to Bourne Again SHell useradd -D -s /bin/bash # what shell am I running echo $0 echo $SHELL # all available shells cat /etc/shells # adduser chris # will prompt for password and other info useradd -m chris # create user and add a home directory # useradd -m chad # useradd -m newuser # create password passwd chris # Add User to Sudo Group usermod -aG sudo chris # switch to user su - chris # add group groupadd docker # get group info getent group docker # add your user to the docker group sudo usermod -aG docker $USER # what groups user is in groups chris cat /etc/group Services \u0026amp; Git # systemd # Service which control all other services\nps -aux | grep systemd More on Processes/Services in Linux\n","date":"15 August 2023","permalink":"/logs/linux/","section":"","summary":"Linux Blogs # Linux Journey Linux File system # / /home # home directories and files from users /bin # user command binaries (cat, echo, etc.","title":"Linux"},{"content":"","date":"13 August 2023","permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI"},{"content":"","date":"13 August 2023","permalink":"/categories/bot/","section":"Categories","summary":"","title":"Bot"},{"content":"","date":"13 August 2023","permalink":"/tags/buildspace/","section":"Tags","summary":"","title":"Buildspace"},{"content":"","date":"13 August 2023","permalink":"/tags/gpt/","section":"Tags","summary":"","title":"GPT"},{"content":"","date":"13 August 2023","permalink":"/tags/slack-bot/","section":"Tags","summary":"","title":"Slack bot"},{"content":" Our project utilizes AI to enhance Slack, streamlining tasks and sparking creativity for seamless teamwork.\nWe (I and my friend Manish) are building this project in BuildSpace.\nWeek 2 # Week 3 # ","date":"13 August 2023","permalink":"/projects/sparrowbot/","section":"","summary":"Our project utilizes AI to enhance Slack, streamlining tasks and sparking creativity for seamless teamwork.","title":"Sparrow Bot"},{"content":" Day 1 # Application Class # Main entry point of Spring Boot\nLayers # Web Layer / Controller Layer + REST Endpoints mappings Service Layer Data Source Data layer Web Layer # This layer has the Controllers(These are just classes which have REST endpoint methods)\n@RestController annotation for creating controller class.\n@RequestMapping annotation for defining the endpoint path\n@GetMapping annotation for GET request.\n@RestController @RequestMapping(\u0026#34;/banks\u0026#34;) class BankController(){ @GetMapping fun getBanks(): List\u0026lt;Bank\u0026gt;{ ... } } @PathVariable for taking an argument when sending the request.\nService Layer # This layer has all the businnes logic\nData Source # This layer has storage(database) and retrieve data\n@Repository Responsible for interaction between app and underlying data Data Layer # This layer has models, serialization logic, Entity classes\nProject Structure # gradle properties files described which needed to download setting.gradle contains all the plugins build.gradle contains all the dependencies needed src main contains the Application class, which is the entry point. test contains all the test files resources static template application.properties contains configuration of whole application like which port to use etc. Test Driven Development using Junit 5 # Dependency Injection # ","date":"5 August 2023","permalink":"/logs/springboot/","section":"","summary":"Day 1 # Application Class # Main entry point of Spring Boot","title":"Spring Boot with Kotlin"},{"content":" 3 main componenets of Navigation # NavHost NavGraph NavController NavHost is the container which is responsible to display destinations(each destinations have a unique specific route) screens\nNavGraph is the place where all the destiantions and how to naviagte to them are described OR it is map, collection of composables( like nodes )\nNavController will control the navigation and take you to your desired destinations.\nImage loading\u0026hellip; NavHost( navController = navController, startDestination = Home.route, modifier = modifier.padding(it) ) { composable(route = Home.route) { HomeScreen() { arg -\u0026gt; navController.navigate(\u0026#34;${Details.route}/$arg\u0026#34;) { launchSingleTop = true } } } composable( route = Details.argWithRoute, arguments = Details.argument ) { DetailsMainScreen() } } NavHost requires navController to control the navigation in itself and a starting point. NavHost also requires NavGraph builder parameter to build navgraph, in above code its in the trailing lambda. Each composable is like a node in NavGraph, which requires a route(like a unique location) and in that composable we define which compose function should execute here. ","date":"3 August 2023","permalink":"/logs/navigation/","section":"","summary":"3 main componenets of Navigation # NavHost NavGraph NavController NavHost is the container which is responsible to display destinations(each destinations have a unique specific route) screens","title":"Navigation in Android"},{"content":" 3 main components to Room DB # ","date":"3 August 2023","permalink":"/logs/roomdb/","section":"","summary":" 3 main components to Room DB # ","title":"Room DB"},{"content":" harisheoran01@gmail.com Mail me Twitter\nLinkedIn\nGithub\n","date":"12 July 2023","permalink":"/contact/","section":"","summary":"harisheoran01@gmail.","title":""},{"content":" App to browse characters, episodes and search details from Rick \u0026amp; Morty Tv show. Download app View source code on Github # harisheoran/rick-morty-collection Explore the characters of the Rick and Morty Tv show. Kotlin 1 0 Gallery # Demo # Read about its MVVM architecture here. # Tech Stack \u0026amp; Libraries # Kotlin Language MVVM Architecture Retrofit Picasso Epoxy RecyclerView Paging 3 Moshi API # The Rick and Morty API MVVM Architecture # Image caption Start from Network Layer\n1. Network Layer # 4 main components are\nService Interface It define how the app should talk to server interface RickAndMortyService { @GET(value = \u0026#34;character/\u0026#34;) suspend fun getCharactersPage(@Query(value = \u0026#34;page\u0026#34;) pageIndex: Int): Response\u0026lt;GetCharactersPageResponse\u0026gt; } Retrofit service Creates an implementation of the API endpoint defined by our interface and pass that service to our API client. object NetworkLayer { val moshi = Moshi.Builder() .add(KotlinJsonAdapterFactory()) .build() private val retrofit: Retrofit = Retrofit.Builder() .client(getLoggingHttpClient()) .baseUrl(\u0026#34;https://rickandmortyapi.com/api/\u0026#34;) .addConverterFactory(MoshiConverterFactory.create(moshi)) .build() private val rickAndMortyService: RickAndMortyService by lazy { retrofit.create(RickAndMortyService::class.java) } val apiClient = ApiClient(rickAndMortyService) } API Client\nThrough which our app will talk to server. It has the methods to talk to API and return the response inside our Network Error handling Network Error handling Class SimpleResponse\nA simple kind of wrapper class\nIt have 3 constructor as a parameter - Status, reponse from API client and exception\nIt has some properties to check weather the response is successfull or failed\n2. Repository Layer # We have 3 repository for fetching Character list( for home screen), Single Charater and Episodes.\nclass CharacterListRepository { suspend fun getCharactersPage(pageIndex: Int): GetCharactersPageResponse? { val request = NetworkLayer.apiClient.getCharactersPages(pageIndex) if (request.failed || !request.isSucceed) { return null } return request.body } } Sending request to api using Api client val request = NetworkLayer.apiClient.getCharactersPages(pageIndex) then checking the request and return accordingly.\n","date":"29 June 2023","permalink":"/projects/rickmorty/","section":"","summary":"App to browse characters, episodes and search details from Rick \u0026amp; Morty Tv show.","title":"Rick \u0026 Morty Collection App"},{"content":"","date":"15 April 2023","permalink":"/tags/cloud-firestore/","section":"Tags","summary":"","title":"Cloud Firestore"},{"content":" App to get access of study materials for college students. # Tech Stacks # Kotlin Language Android Jetpack Components Firebase Cloud Firestore Lottie Android View on Website # Download pre-alpha version # View on Github # harisheoran/collegehub App to get access of study materials for college students. null 0 0 ","date":"15 April 2023","permalink":"/projects/collegehub/","section":"","summary":"App to get access of study materials for college students.","title":"College Hub App"},{"content":"","date":"15 April 2023","permalink":"/tags/firebase/","section":"Tags","summary":"","title":"Firebase"},{"content":"","date":"30 December 2022","permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":" App to browse memes. # For bowsing meme templates from ImgFlip API.\nView on Github # Tech Stack\nKotlin Jetpack Navigation Components Retrofit for networking Coil to display images Demo # ","date":"30 December 2022","permalink":"/projects/memeit/","section":"","summary":"App to browse memes.","title":"Memeit App"},{"content":"","date":"29 October 2022","permalink":"/tags/bootstrap/","section":"Tags","summary":"","title":"Bootstrap"},{"content":"","date":"29 October 2022","permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare"},{"content":"","date":"29 October 2022","permalink":"/tags/express-js/","section":"Tags","summary":"","title":"Express JS"},{"content":"","date":"29 October 2022","permalink":"/tags/mongodb/","section":"Tags","summary":"","title":"MongoDB"},{"content":"","date":"29 October 2022","permalink":"/tags/nodejs/","section":"Tags","summary":"","title":"NodeJs"},{"content":"","date":"29 October 2022","permalink":"/categories/web/","section":"Categories","summary":"","title":"Web"},{"content":" Programmer Server # A place for programmers to discuss, share thier ideas and make connections.\nView on Github\nMemes of the day # Browse top memes of the day\nView on Website\nWeb Mini Projects # Weather Application Random Color Generator Pokemon Generator Weight Convertor View on Website\n","date":"29 October 2022","permalink":"/projects/webprojects/","section":"","summary":"Programmer Server # A place for programmers to discuss, share thier ideas and make connections.","title":"Web Projects"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]