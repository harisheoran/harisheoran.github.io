[{"content":"","date":"30 July 2023","permalink":"/","section":"","summary":"","title":""},{"content":"","date":"30 July 2023","permalink":"/projects/","section":"","summary":"","title":""},{"content":"","date":"30 July 2023","permalink":"/categories/android/","section":"Categories","summary":"","title":"Android"},{"content":"","date":"30 July 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"30 July 2023","permalink":"/tags/jetpack-compose/","section":"Tags","summary":"","title":"Jetpack Compose"},{"content":"","date":"30 July 2023","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"Kotlin"},{"content":"","date":"30 July 2023","permalink":"/tags/mvvm/","section":"Tags","summary":"","title":"MVVM"},{"content":"","date":"30 July 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Warriors Of Hind App\nTech Stack # Frontend\nMVVM Architecture Kotlin Jetpack Compose Retrofit Hilt Coil Backend\nJsonBin View source code on Github # harisheoran/Warriors-Of-Hind Kotlin 0 0 Documentation is coming soon\u0026hellip;\n","date":"30 July 2023","permalink":"/projects/warriorsofhind/","section":"","summary":"Warriors Of Hind App","title":"Warriors Of Hind App"},{"content":"We are going to learn about Hilt by using of Hilt as dependency Injection in a basic MVVM app.\nIf you are new to Dependency concept, first check out About Dependency Injection below.\nUsing Hilt in App # We are going to learn about Hilt by using Hilt as a dependency Injection in a basic MVVM app.\nClone the starter app from the \u0026ldquo;starter_app\u0026rdquo; branch harisheoran/basic-hilt-demo null 1 0 Understand file structure (MVVM structure) MainAcivity contains UI Logic MyViewModel contains the app\u0026rsquo;s state logic MyRepository have methods to fetch data from MyServie MyServie provides image URLs. Create a Hilt Application class \u0026amp; annotate it with @HiltAndroidApp @HiltAndroidAppclass MyApplication: Application(){ override fun onCreate(){ super.onCreate() } } All apps that use Hilt must contain an Application class that is annotated with @HiltAndroidApp.\n@HiltAndroidApp triggers Hilt\u0026rsquo;s code generation, including a base class for your application that serves as the application-level dependency container.\nThis generated Hilt component is attached to the Application object\u0026rsquo;s lifecycle and provides dependencies to it. Additionally, it is the parent component of the app, which means that other components can access the dependencies that it provides.\nInject dependencies into Android classes Once Hilt is set up in your Application class and an application-level component is available, Hilt can provide dependencies to other Android classes that have the @AndroidEntryPoint annotation: MainActivity\n@AndroidEntryPointclass MainActivity : AppCompatActivity() { } and in our Manifest file, in the application tag\nandroid:name=\u0026#34;.MyApplication\u0026#34; Now, start from MyRepository First Identify the class dependency - which is the service instance. class MyRepository { private val service = MyService() fun getRandomImageUrl(): String { return service.getImageUrl() } } To perform field injection, hilt had to know about how to provide instance of dependency from the corresponding component.\nA binding contains the information necessary to provide instances of a type as a dependency. To provide binding to the Hilt is by constructor injection using @Inject annotation, and the parameters of that constructor are the dependencies of that class.\nclass MyRepository @Inject constructor(private val service: MyService) { fun getRandomImageUrl(): String { return service.getImageUrl() }} ViewModel In ViewModel, we have a dependency on the MyRepository instance. Simply we can\u0026rsquo;t pass the MyRepository instance in the constructor of ViewModel simply, that\u0026rsquo;s a whole different scenario, but Hilt have an annotation to make it work and it is one of the best features of Hilt @HiltViewModelclass MyViewModel @Inject constructor(private val repository: MyRepository) : ViewModel() { } MainActivity We have an instance of Picasso as a dependency, and it is created every time when a new photo is shown. Sometimes a type can\u0026rsquo;t be constructed, as you cannot constructor-inject a type that you do not own like 3rd party library.\nNow you have to provide info to Hilt about how to construct the needed object instance,\nHilt Modules A Hilt module is a class that is annotated with @Module. Like a Dagger module, it informs Hilt how to provide instances of certain types. Unlike Dagger modules, you must annotate Hilt modules with @InstallIn to tell Hilt which Android class each module will be used or installed in.\nCreate a singleton class Picasso Module @Module@InstallIn(SingletonComponent::class) object PicassoModule { @Provides fun providePicasso(): Picasso { return Picasso.get() } } you can tell Hilt how to provide instances of this type by creating a function inside a Hilt module and annotating that function with @Provides. The annotated function supplies the following information to Hilt:\nThe function return type tells Hilt what type the function provides instances of. - The function parameters tell Hilt the dependencies of the corresponding type. The function body tells Hilt how to provide an instance of the corresponding type. Hilt executes the function body every time it needs to provide an instance of that type. Create a Util class to load images from Picasso class PicassoUtil @Inject constructor(private val picasso: Picasso) { fun loadImage(imgUrl: String, imgView: ImageView){ picasso.load(imgUrl).into(imgView) } } it automatically takes Picasso from Picasso Module and now Update our MainActivity\n@AndroidEntryPointclass MainActivity : AppCompatActivity() { ... @Inject lateinit var picassoUtil: PicassoUtil ... override fun onCreate(savedInstanceState: Bundle?) { ... ViewModel.image.observe(this) { picassoUtil.loadImage(it, binding.imageView) } } } That\u0026rsquo;s it, here is the code harisheoran/basic-hilt-demo null 1 0 Learn about Dependency Injection\nAbout Dependency Injection # What is a Dependency? # Lets say there is a class Car\nclass Car(){ val engine = Engine() fun start(){ engine.run() } } Class Car needs reference to Engine instance, it depends on Engine object, so engine object is the dependency of Car class.\nSo, there can be many dependency Car class can have like Nitro, Tire, Gas Engine, Electric Engine as its dependency.\nWhat are the ways to provide the needed object to a class? # Initialize own instance of the Engine - As described above. class Car(){ val engine = Engine() fun start(){ engine.run() } } fun main(args: Array) { val car = Car() car.start() } From an API.\nConstructor Injection As a parameter in the class cunstructor\nInstead of each instance of car creating its own Engine object on initialization, it recevies Engine object as an parameter in its constructor.\nclass Car(val engine: Engine){ fun start(){ engine.run() } } fun main(args: Array){ val engine = Engine() val car = Car(engine) car.start() } Benefits\nCode reusability As you can pass different types of engine instance like Gas Engine or Electric Engine without any change in Car class\nCode testability You can test your Car class with many scenearios by passing Test Engine by configuring it with different tests.\nThis is manual Dependency Injection Manual dependency can be overwhelming as Car can have many dependencies which will make it more tedious.\nField Injection Certain Android framework classes such as activities and fragments are instantiated by the system, so constructor injection is not possible. With field injection, dependencies are instantiated after the class is created. class Car(){ lateinit var engine: Engine fun start(){ engine.run() } } fun main(args: Array){ val car = Car() car.engine = Engine() car.start() } Automated Dependency Injection # Hilt is Jetpack\u0026rsquo;s recommended library for dependency injection in Android. Hilt defines a standard way to do DI in your application by providing containers for every Android class in your project and managing their lifecycles automatically for you.\nHilt is built on top of the popular DI library Dagger to benefit from the compile time correctness, runtime performance, scalability, and Android Studio support that Dagger provides.\n","date":"17 July 2023","permalink":"/projects/basichiltdemo/","section":"","summary":"We are going to learn about Hilt by using of Hilt as dependency Injection in a basic MVVM app.","title":"Basic Hilt Demo App"},{"content":"","date":"17 July 2023","permalink":"/tags/dependency-injection/","section":"Tags","summary":"","title":"Dependency Injection"},{"content":"","date":"17 July 2023","permalink":"/tags/hilt/","section":"Tags","summary":"","title":"Hilt"},{"content":" Mail me ðŸ“§ harisheoran205@gmail.com\nLets Connect Twitter\nLinkedIn\nGithub\nContact I am currently open for full-time engineering roles, which involves Android app developmenet. Interested in working together? Feel free to schedule a meet! ","date":"12 July 2023","permalink":"/contact/","section":"","summary":"Mail me ðŸ“§ harisheoran205@gmail.","title":""},{"content":"","date":"12 July 2023","permalink":"/hire/","section":"","summary":"","title":"Hire me"},{"content":" I am an software developer who finds great joy in leveraging a variety of tools to create exceptional solutions. As an Android app developer proficient in Kotlin, I am deeply passionate about harnessing the power of modern Android app architecture. Additionally, my expertise extends to utilizing backend services like Firebase to enhance the functionality and performance of my applications.\nBeing a Linux enthusiast, I relish exploring its vast ecosystem and harnessing its capabilities to optimize my development workflow.\nI am also a firm believer in the importance of version control systems like Git and GitHub, which I integrate seamlessly into my app development process to ensure efficient collaboration and code management.\nFurthermore, my journey began with web development, where I cultivated a strong foundation in creating dynamic and visually appealing websites. This background has equipped me with valuable insights into front-end technologies and web development best practices.\nDriven by my passion for software development and armed with a versatile toolkit encompassing Kotlin, modern Android app architecture, Firebase, Linux, Git, GitHub, and web development, I am eager to contribute my skills and expertise to projects that push the boundaries of innovation.\nGithub Stats # Wakatime Stats (starting 1st August) # \u003c!DOCTYPE html\u003e Android Kotlin SQLite Java Firebase Git GitHub Gitlab Figma Studio Intellij Vim Linux VScode \u003c?xml version=\"1.0\" encoding=\"iso-8859-1\"?\u003e\rRest Postman ","date":"29 June 2023","permalink":"/about/","section":"","summary":"I am an software developer who finds great joy in leveraging a variety of tools to create exceptional solutions.","title":"About"},{"content":" App to browse characters, episodes and search details from Rick \u0026amp; Morty Tv show. Download app View source code on Github # harisheoran/rick-morty-collection Explore the characters of the Rick and Morty Tv show. Kotlin 1 0 Gallery # Demo # Read about its MVVM architecture here. # Tech Stack \u0026amp; Libraries # Kotlin Language MVVM Architecture Retrofit Picasso Epoxy RecyclerView Paging 3 Moshi API # The Rick and Morty API MVVM Architecture # Image caption Start from Network Layer\n1. Network Layer # 4 main components are\nService Interface It define how the app should talk to server interface RickAndMortyService { @GET(value = \u0026#34;character/\u0026#34;) suspend fun getCharactersPage(@Query(value = \u0026#34;page\u0026#34;) pageIndex: Int): Response\u0026lt;GetCharactersPageResponse\u0026gt; } Retrofit service Creates an implementation of the API endpoint defined by our interface and pass that service to our API client. object NetworkLayer { val moshi = Moshi.Builder() .add(KotlinJsonAdapterFactory()) .build() private val retrofit: Retrofit = Retrofit.Builder() .client(getLoggingHttpClient()) .baseUrl(\u0026#34;https://rickandmortyapi.com/api/\u0026#34;) .addConverterFactory(MoshiConverterFactory.create(moshi)) .build() private val rickAndMortyService: RickAndMortyService by lazy { retrofit.create(RickAndMortyService::class.java) } val apiClient = ApiClient(rickAndMortyService) } API Client\nThrough which our app will talk to server. It has the methods to talk to API and return the response inside our Network Error handling Network Error handling Class SimpleResponse\nA simple kind of wrapper class\nIt have 3 constructor as a parameter - Status, reponse from API client and exception\nIt has some properties to check weather the response is successfull or failed\n2. Repository Layer # We have 3 repository for fetching Character list( for home screen), Single Charater and Episodes.\nclass CharacterListRepository { suspend fun getCharactersPage(pageIndex: Int): GetCharactersPageResponse? { val request = NetworkLayer.apiClient.getCharactersPages(pageIndex) if (request.failed || !request.isSucceed) { return null } return request.body } } Sending request to api using Api client val request = NetworkLayer.apiClient.getCharactersPages(pageIndex) then checking the request and return accordingly.\nPaging 3 # \u0026hellip;\nViewModel # \u0026hellip;\nUI # \u0026hellip;\nEpoxy UI # \u0026hellip;\nData binding # \u0026hellip;\n","date":"29 June 2023","permalink":"/projects/rickmorty/","section":"","summary":"App to browse characters, episodes and search details from Rick \u0026amp; Morty Tv show.","title":"Rick \u0026 Morty Collection App"},{"content":"","date":"15 April 2023","permalink":"/tags/cloud-firestore/","section":"Tags","summary":"","title":"Cloud Firestore"},{"content":" App to get access of study materials for college students. # Tech Stacks # Kotlin Language Android Jetpack Components Firebase Cloud Firestore Lottie Android View on Website # Download pre-alpha version # View on Github # harisheoran/collegehub App to get access of study materials for college students. null 0 0 ","date":"15 April 2023","permalink":"/projects/collegehub/","section":"","summary":"App to get access of study materials for college students.","title":"College Hub App"},{"content":"","date":"15 April 2023","permalink":"/tags/firebase/","section":"Tags","summary":"","title":"Firebase"},{"content":"","date":"30 December 2022","permalink":"/tags/imgflip-api/","section":"Tags","summary":"","title":"ImgFlip API"},{"content":"","date":"30 December 2022","permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":" App to browse memes. # Java Version # For browsing memes from Reddit API.\nView on Github # Kotlin Version # For bowsing meme templates from ImgFlip API.\nTech Stack\nKotlin Jectpack Navigation Components Retrofit for networking Coil to display images View on Github # ","date":"30 December 2022","permalink":"/projects/memeit/","section":"","summary":"App to browse memes.","title":"Memeit App"},{"content":"","date":"30 December 2022","permalink":"/tags/reddit-api/","section":"Tags","summary":"","title":"Reddit API"},{"content":"","date":"29 October 2022","permalink":"/tags/bootstrap/","section":"Tags","summary":"","title":"Bootstrap"},{"content":"","date":"29 October 2022","permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare"},{"content":"","date":"29 October 2022","permalink":"/tags/express-js/","section":"Tags","summary":"","title":"Express JS"},{"content":"","date":"29 October 2022","permalink":"/tags/mongodb/","section":"Tags","summary":"","title":"MongoDB"},{"content":"","date":"29 October 2022","permalink":"/tags/nodejs/","section":"Tags","summary":"","title":"NodeJs"},{"content":"","date":"29 October 2022","permalink":"/categories/web/","section":"Categories","summary":"","title":"Web"},{"content":" Programmer Server # A place for programmers to discuss, share thier ideas and make connections.\nView on Github\nMemes of the day # Browse top memes of the day\nView on Website\nWeb Mini Projects # Weather Application Random Color Generator Pokemon Generator Weight Convertor View on Website\n","date":"29 October 2022","permalink":"/projects/webprojects/","section":"","summary":"Programmer Server # A place for programmers to discuss, share thier ideas and make connections.","title":"Web Projects"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]